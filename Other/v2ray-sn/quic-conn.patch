diff --git a/app/dns/nameserver_quic.go b/app/dns/nameserver_quic.go
index 14f2d0fd..75904335 100644
--- a/app/dns/nameserver_quic.go
+++ b/app/dns/nameserver_quic.go
@@ -37,7 +37,7 @@ type QUICNameServer struct {
 	reqID         uint32
 	name          string
 	destination   net.Destination
-	session       quic.Session
+	session       quic.Connection
 	disableExpire bool
 }
 
@@ -323,7 +323,7 @@ func (s *QUICNameServer) QueryIP(ctx context.Context, domain string, clientIP ne
 	}
 }
 
-func isActive(s quic.Session) bool {
+func isActive(s quic.Connection) bool {
 	select {
 	case <-s.Context().Done():
 		return false
@@ -332,8 +332,8 @@ func isActive(s quic.Session) bool {
 	}
 }
 
-func (s *QUICNameServer) getSession(ctx context.Context) (quic.Session, error) {
-	var session quic.Session
+func (s *QUICNameServer) getSession(ctx context.Context) (quic.Connection, error) {
+	var session quic.Connection
 	s.RLock()
 	session = s.session
 	if session != nil && isActive(session) {
@@ -366,7 +366,7 @@ func (s *QUICNameServer) getSession(ctx context.Context) (quic.Session, error) {
 	return session, nil
 }
 
-func (s *QUICNameServer) openSession(ctx context.Context) (quic.Session, error) {
+func (s *QUICNameServer) openSession(ctx context.Context) (quic.Connection, error) {
 	tlsConfig := tls.Config{}
 	quicConfig := &quic.Config{
 		HandshakeIdleTimeout: handshakeIdleTimeout,
diff --git a/transport/internet/quic/dialer.go b/transport/internet/quic/dialer.go
index c2d90d67..9d7ca2a1 100644
--- a/transport/internet/quic/dialer.go
+++ b/transport/internet/quic/dialer.go
@@ -16,7 +16,7 @@ import (
 
 type sessionContext struct {
 	rawConn *sysConn
-	session quic.Session
+	session quic.Connection
 }
 
 var errSessionClosed = newError("session closed")
@@ -46,7 +46,7 @@ type clientSessions struct {
 	cleanup  *task.Periodic
 }
 
-func isActive(s quic.Session) bool {
+func isActive(s quic.Connection) bool {
 	select {
 	case <-s.Context().Done():
 		return false
@@ -151,7 +151,7 @@ func (s *clientSessions) openConnection(destAddr net.Addr, config *Config, tlsCo
 		ConnectionIDLength:   12,
 		HandshakeIdleTimeout: time.Second * 8,
 		MaxIdleTimeout:       time.Second * 30,
-		KeepAlive:            true,
+		KeepAlivePeriod:      time.Second * 15,
 	}
 
 	conn, err := wrapSysConn(rawConn.(*net.UDPConn), config)
diff --git a/transport/internet/quic/hub.go b/transport/internet/quic/hub.go
index a771cdb2..84e926d2 100644
--- a/transport/internet/quic/hub.go
+++ b/transport/internet/quic/hub.go
@@ -22,7 +22,7 @@ type Listener struct {
 	addConn  internet.ConnHandler
 }
 
-func (l *Listener) acceptStreams(session quic.Session) {
+func (l *Listener) acceptStreams(session quic.Connection) {
 	for {
 		stream, err := session.AcceptStream(context.Background())
 		if err != nil {
@@ -107,7 +107,7 @@ func Listen(ctx context.Context, address net.Address, port net.Port, streamSetti
 		MaxIdleTimeout:        time.Second * 45,
 		MaxIncomingStreams:    32,
 		MaxIncomingUniStreams: -1,
-		KeepAlive:             true,
+		KeepAlivePeriod:       time.Second * 15,
 	}
 
 	conn, err := wrapSysConn(rawConn.(*net.UDPConn), config)
